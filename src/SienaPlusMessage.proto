package sienaplus;

message SienaPlusMessage {

 	// constants and type definitions

    enum message_type_t {
        SUB = 1;
        NOT = 2;
        UNSUB = 3;

        HNDSHAKE = 4; // this is the first message a connecting client 
                      // sends to a server. 

        HNDSHAKE_ACK = 5; // this type of message is sent
                //  in response to a HNDSHAKE message. This message also
                //  carries an integer (field 'assigned_id', defined later)
                // which stores the id that the connection acceptor assigned 
                // to the receiver of the message.
    }
    
    /*
    	IMPORTANT NOTE: THE ORDER AND VALUE OF ITEMS IN tag_type_t ARE IMPORTANT,
    	and must be the same as in Siena/types.h. This makes it easy and efficient to
    	directly convert from Siena tags type to Protobuf tag type (i.e.
    	both integers of the same value).
    */

    enum tag_type_t {
        STRING = 1;
        INT = 2;
        DOUBLE = 3;
        BOOL = 4;
        ANY_TYPE = 5;
    };
    
    message value_t {
        required tag_type_t type = 1;
		optional string string_value = 2;
		optional int32 int_value = 3;
		optional double double_value = 4;
		optional bool bool_value = 5;
    }
    
    message subscription_t {
    
    /*
    	IMPORTANT NOTE: THE ORDER AND VALUE OF ITEMS IN operator_t ARE IMPORTANT.
    	See the above explanation for tag_type_t.
    */
    
        enum operator_t {
    		EQUAL = 1;
    		LESS_THAN = 2;
    		GREATER_THAN = 3;
    		SUFFIX = 4;
            PREFIX = 5;
            SUB_STRING = 6;
            ANY = 7;
            NOT_EQUAL = 8;
            REGULAR_EXP = 9;
    	}
    	
    	message constraint_t {
    		required string name = 1;
    		required operator_t op = 2;  
    		required value_t value = 3;
    	}
    
        repeated constraint_t constraints = 1;
    }
    
    message notification_t {
    	
    	message attribute_t {
    		required string name = 1;
    		required value_t value = 2;
    	}
    	
        repeated attribute_t attribute = 1;
    }
    
    // mandatory message fields
    required message_type_t type = 1;
   	required string sender = 2; // this is the sender's 
        // id that is assigned to it by the connection acceptor

    // pub/sub related messages 
   	optional subscription_t subscription = 3;
    optional notification_t notification = 4;
    optional string unsubscription = 5;
    optional string payload = 6;

    //control messages 
    optional int32 assigned_id = 7; // this id is assigned by the broker
        // and sent to the client. (client here means the initiator of 
        // connection. Any further messages sent by a sender has to carry 
        // its sender_id (field 2 defined above)
}
