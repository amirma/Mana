package mana;

message ManaMessage {

 	// constants and type definitions

    enum message_type_t {
  		// --------- control messages ------------ // 
        START_SESSION = 1; // session initiator sends this message as the first message in a session
        START_SESSION_ACK = 2; // receiver of a START_SESSION sends an ack.  
        START_SESSION_ACK_ACK = 3; // The session initiator acknowledges the ack. and the session begins.
     	   
        TERMINATE_SESSION = 4; // In a graceful session termination this should
        TERMINATE_SESSION_ACK = 5; // Termination might ba acked.
     
        ACK = 6;
        HEARTBEAT = 7;
        
        // ----------- pub/sub messages ------------ //
        SUB = 8;
        NOT = 9;
        UNSUB = 10;
    }

    /*
    	IMPORTANT NOTE: THE ORDER AND VALUE OF ITEMS IN tag_type_t ARE IMPORTANT,
    	and must be the same as in Siena/types.h. This makes it easy and efficient to
    	directly convert from Siena tags type to Protobuf tag type (i.e.
    	both integers of the same value).
    */
    enum tag_type_t {
        STRING = 1;
        INT = 2;
        DOUBLE = 3;
        BOOL = 4;
        ANY_TYPE = 5;
    };

    message value_t {
        required tag_type_t type = 1;
        optional string string_value = 2;
        optional int32 int_value = 3;
        optional double double_value = 4;
        optional bool bool_value = 5;
    }

    message subscription_t {

    /*
    	IMPORTANT NOTE: THE ORDER AND VALUE OF ITEMS IN operator_t ARE IMPORTANT.
    	See the above explanation for tag_type_t.
    */

        enum operator_t {
            EQUAL = 1;
            LESS_THAN = 2;
            GREATER_THAN = 3;
            SUFFIX = 4;
            PREFIX = 5;
            SUB_STRING = 6;
            ANY = 7;
            NOT_EQUAL = 8;
            REGULAR_EXP = 9;
    	}

    	message constraint_t {
            required string name = 1;
            required operator_t op = 2;
            required value_t value = 3;
    	}

        repeated constraint_t constraints = 1;
    }

    message notification_t {

    	message attribute_t {
    		required string name = 1;
    		required value_t value = 2;
    	}

        repeated attribute_t attribute = 1;
    }
    
    // ------------- mandatory message fields ----------------- //
    required message_type_t type = 1;
    required string sender = 2; // this is the sender's id
    
    // ------------------- control -------------------------- //
    optional int32 seq_no = 3;

    // ------------- pub/sub related messages --------------- //
    optional subscription_t subscription = 4;
    optional notification_t notification = 5;
    optional string unsubscription = 6;
    
    // ------------------- payload -------------------------- //
    optional string payload = 7;
}
