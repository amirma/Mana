// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SienaPlusMessage.proto

#ifndef PROTOBUF_SienaPlusMessage_2eproto__INCLUDED
#define PROTOBUF_SienaPlusMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace sienaplus {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SienaPlusMessage_2eproto();
void protobuf_AssignDesc_SienaPlusMessage_2eproto();
void protobuf_ShutdownFile_SienaPlusMessage_2eproto();

class SienaPlusMessage;
class SienaPlusMessage_value_t;
class SienaPlusMessage_subscription_t;
class SienaPlusMessage_subscription_t_constraint_t;
class SienaPlusMessage_notification_t;
class SienaPlusMessage_notification_t_attribute_t;

enum SienaPlusMessage_subscription_t_operator_t {
  SienaPlusMessage_subscription_t_operator_t_EQUAL = 1,
  SienaPlusMessage_subscription_t_operator_t_LESS_THAN = 2,
  SienaPlusMessage_subscription_t_operator_t_GREATER_THAN = 3,
  SienaPlusMessage_subscription_t_operator_t_SUFFIX = 4,
  SienaPlusMessage_subscription_t_operator_t_PREFIX = 5,
  SienaPlusMessage_subscription_t_operator_t_SUB_STRING = 6,
  SienaPlusMessage_subscription_t_operator_t_ANY = 7,
  SienaPlusMessage_subscription_t_operator_t_NOT_EQUAL = 8,
  SienaPlusMessage_subscription_t_operator_t_REGULAR_EXP = 9
};
bool SienaPlusMessage_subscription_t_operator_t_IsValid(int value);
const SienaPlusMessage_subscription_t_operator_t SienaPlusMessage_subscription_t_operator_t_operator_t_MIN = SienaPlusMessage_subscription_t_operator_t_EQUAL;
const SienaPlusMessage_subscription_t_operator_t SienaPlusMessage_subscription_t_operator_t_operator_t_MAX = SienaPlusMessage_subscription_t_operator_t_REGULAR_EXP;
const int SienaPlusMessage_subscription_t_operator_t_operator_t_ARRAYSIZE = SienaPlusMessage_subscription_t_operator_t_operator_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* SienaPlusMessage_subscription_t_operator_t_descriptor();
inline const ::std::string& SienaPlusMessage_subscription_t_operator_t_Name(SienaPlusMessage_subscription_t_operator_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    SienaPlusMessage_subscription_t_operator_t_descriptor(), value);
}
inline bool SienaPlusMessage_subscription_t_operator_t_Parse(
    const ::std::string& name, SienaPlusMessage_subscription_t_operator_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SienaPlusMessage_subscription_t_operator_t>(
    SienaPlusMessage_subscription_t_operator_t_descriptor(), name, value);
}
enum SienaPlusMessage_message_type_t {
  SienaPlusMessage_message_type_t_SUB = 1,
  SienaPlusMessage_message_type_t_NOT = 2,
  SienaPlusMessage_message_type_t_UNSUB = 3
};
bool SienaPlusMessage_message_type_t_IsValid(int value);
const SienaPlusMessage_message_type_t SienaPlusMessage_message_type_t_message_type_t_MIN = SienaPlusMessage_message_type_t_SUB;
const SienaPlusMessage_message_type_t SienaPlusMessage_message_type_t_message_type_t_MAX = SienaPlusMessage_message_type_t_UNSUB;
const int SienaPlusMessage_message_type_t_message_type_t_ARRAYSIZE = SienaPlusMessage_message_type_t_message_type_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* SienaPlusMessage_message_type_t_descriptor();
inline const ::std::string& SienaPlusMessage_message_type_t_Name(SienaPlusMessage_message_type_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    SienaPlusMessage_message_type_t_descriptor(), value);
}
inline bool SienaPlusMessage_message_type_t_Parse(
    const ::std::string& name, SienaPlusMessage_message_type_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SienaPlusMessage_message_type_t>(
    SienaPlusMessage_message_type_t_descriptor(), name, value);
}
enum SienaPlusMessage_tag_type_t {
  SienaPlusMessage_tag_type_t_STRING = 1,
  SienaPlusMessage_tag_type_t_INT = 2,
  SienaPlusMessage_tag_type_t_DOUBLE = 3,
  SienaPlusMessage_tag_type_t_BOOLEAN = 4,
  SienaPlusMessage_tag_type_t_ANY_TYPE = 5
};
bool SienaPlusMessage_tag_type_t_IsValid(int value);
const SienaPlusMessage_tag_type_t SienaPlusMessage_tag_type_t_tag_type_t_MIN = SienaPlusMessage_tag_type_t_STRING;
const SienaPlusMessage_tag_type_t SienaPlusMessage_tag_type_t_tag_type_t_MAX = SienaPlusMessage_tag_type_t_ANY_TYPE;
const int SienaPlusMessage_tag_type_t_tag_type_t_ARRAYSIZE = SienaPlusMessage_tag_type_t_tag_type_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* SienaPlusMessage_tag_type_t_descriptor();
inline const ::std::string& SienaPlusMessage_tag_type_t_Name(SienaPlusMessage_tag_type_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    SienaPlusMessage_tag_type_t_descriptor(), value);
}
inline bool SienaPlusMessage_tag_type_t_Parse(
    const ::std::string& name, SienaPlusMessage_tag_type_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SienaPlusMessage_tag_type_t>(
    SienaPlusMessage_tag_type_t_descriptor(), name, value);
}
// ===================================================================

class SienaPlusMessage_value_t : public ::google::protobuf::Message {
 public:
  SienaPlusMessage_value_t();
  virtual ~SienaPlusMessage_value_t();
  
  SienaPlusMessage_value_t(const SienaPlusMessage_value_t& from);
  
  inline SienaPlusMessage_value_t& operator=(const SienaPlusMessage_value_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SienaPlusMessage_value_t& default_instance();
  
  void Swap(SienaPlusMessage_value_t* other);
  
  // implements Message ----------------------------------------------
  
  SienaPlusMessage_value_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SienaPlusMessage_value_t& from);
  void MergeFrom(const SienaPlusMessage_value_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .sienaplus.SienaPlusMessage.tag_type_t type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::sienaplus::SienaPlusMessage_tag_type_t type() const;
  inline void set_type(::sienaplus::SienaPlusMessage_tag_type_t value);
  
  // optional string string_value = 2;
  inline bool has_string_value() const;
  inline void clear_string_value();
  static const int kStringValueFieldNumber = 2;
  inline const ::std::string& string_value() const;
  inline void set_string_value(const ::std::string& value);
  inline void set_string_value(const char* value);
  inline void set_string_value(const char* value, size_t size);
  inline ::std::string* mutable_string_value();
  inline ::std::string* release_string_value();
  
  // optional int32 int_value = 3;
  inline bool has_int_value() const;
  inline void clear_int_value();
  static const int kIntValueFieldNumber = 3;
  inline ::google::protobuf::int32 int_value() const;
  inline void set_int_value(::google::protobuf::int32 value);
  
  // optional double double_value = 4;
  inline bool has_double_value() const;
  inline void clear_double_value();
  static const int kDoubleValueFieldNumber = 4;
  inline double double_value() const;
  inline void set_double_value(double value);
  
  // optional bool bool_value = 5;
  inline bool has_bool_value() const;
  inline void clear_bool_value();
  static const int kBoolValueFieldNumber = 5;
  inline bool bool_value() const;
  inline void set_bool_value(bool value);
  
  // @@protoc_insertion_point(class_scope:sienaplus.SienaPlusMessage.value_t)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_string_value();
  inline void clear_has_string_value();
  inline void set_has_int_value();
  inline void clear_has_int_value();
  inline void set_has_double_value();
  inline void clear_has_double_value();
  inline void set_has_bool_value();
  inline void clear_has_bool_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* string_value_;
  int type_;
  ::google::protobuf::int32 int_value_;
  double double_value_;
  bool bool_value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_SienaPlusMessage_2eproto();
  friend void protobuf_AssignDesc_SienaPlusMessage_2eproto();
  friend void protobuf_ShutdownFile_SienaPlusMessage_2eproto();
  
  void InitAsDefaultInstance();
  static SienaPlusMessage_value_t* default_instance_;
};
// -------------------------------------------------------------------

class SienaPlusMessage_subscription_t_constraint_t : public ::google::protobuf::Message {
 public:
  SienaPlusMessage_subscription_t_constraint_t();
  virtual ~SienaPlusMessage_subscription_t_constraint_t();
  
  SienaPlusMessage_subscription_t_constraint_t(const SienaPlusMessage_subscription_t_constraint_t& from);
  
  inline SienaPlusMessage_subscription_t_constraint_t& operator=(const SienaPlusMessage_subscription_t_constraint_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SienaPlusMessage_subscription_t_constraint_t& default_instance();
  
  void Swap(SienaPlusMessage_subscription_t_constraint_t* other);
  
  // implements Message ----------------------------------------------
  
  SienaPlusMessage_subscription_t_constraint_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SienaPlusMessage_subscription_t_constraint_t& from);
  void MergeFrom(const SienaPlusMessage_subscription_t_constraint_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required .sienaplus.SienaPlusMessage.subscription_t.operator_t op = 2;
  inline bool has_op() const;
  inline void clear_op();
  static const int kOpFieldNumber = 2;
  inline ::sienaplus::SienaPlusMessage_subscription_t_operator_t op() const;
  inline void set_op(::sienaplus::SienaPlusMessage_subscription_t_operator_t value);
  
  // required .sienaplus.SienaPlusMessage.value_t value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline const ::sienaplus::SienaPlusMessage_value_t& value() const;
  inline ::sienaplus::SienaPlusMessage_value_t* mutable_value();
  inline ::sienaplus::SienaPlusMessage_value_t* release_value();
  
  // @@protoc_insertion_point(class_scope:sienaplus.SienaPlusMessage.subscription_t.constraint_t)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_op();
  inline void clear_has_op();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::sienaplus::SienaPlusMessage_value_t* value_;
  int op_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_SienaPlusMessage_2eproto();
  friend void protobuf_AssignDesc_SienaPlusMessage_2eproto();
  friend void protobuf_ShutdownFile_SienaPlusMessage_2eproto();
  
  void InitAsDefaultInstance();
  static SienaPlusMessage_subscription_t_constraint_t* default_instance_;
};
// -------------------------------------------------------------------

class SienaPlusMessage_subscription_t : public ::google::protobuf::Message {
 public:
  SienaPlusMessage_subscription_t();
  virtual ~SienaPlusMessage_subscription_t();
  
  SienaPlusMessage_subscription_t(const SienaPlusMessage_subscription_t& from);
  
  inline SienaPlusMessage_subscription_t& operator=(const SienaPlusMessage_subscription_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SienaPlusMessage_subscription_t& default_instance();
  
  void Swap(SienaPlusMessage_subscription_t* other);
  
  // implements Message ----------------------------------------------
  
  SienaPlusMessage_subscription_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SienaPlusMessage_subscription_t& from);
  void MergeFrom(const SienaPlusMessage_subscription_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef SienaPlusMessage_subscription_t_constraint_t constraint_t;
  
  typedef SienaPlusMessage_subscription_t_operator_t operator_t;
  static const operator_t EQUAL = SienaPlusMessage_subscription_t_operator_t_EQUAL;
  static const operator_t LESS_THAN = SienaPlusMessage_subscription_t_operator_t_LESS_THAN;
  static const operator_t GREATER_THAN = SienaPlusMessage_subscription_t_operator_t_GREATER_THAN;
  static const operator_t SUFFIX = SienaPlusMessage_subscription_t_operator_t_SUFFIX;
  static const operator_t PREFIX = SienaPlusMessage_subscription_t_operator_t_PREFIX;
  static const operator_t SUB_STRING = SienaPlusMessage_subscription_t_operator_t_SUB_STRING;
  static const operator_t ANY = SienaPlusMessage_subscription_t_operator_t_ANY;
  static const operator_t NOT_EQUAL = SienaPlusMessage_subscription_t_operator_t_NOT_EQUAL;
  static const operator_t REGULAR_EXP = SienaPlusMessage_subscription_t_operator_t_REGULAR_EXP;
  static inline bool operator_t_IsValid(int value) {
    return SienaPlusMessage_subscription_t_operator_t_IsValid(value);
  }
  static const operator_t operator_t_MIN =
    SienaPlusMessage_subscription_t_operator_t_operator_t_MIN;
  static const operator_t operator_t_MAX =
    SienaPlusMessage_subscription_t_operator_t_operator_t_MAX;
  static const int operator_t_ARRAYSIZE =
    SienaPlusMessage_subscription_t_operator_t_operator_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  operator_t_descriptor() {
    return SienaPlusMessage_subscription_t_operator_t_descriptor();
  }
  static inline const ::std::string& operator_t_Name(operator_t value) {
    return SienaPlusMessage_subscription_t_operator_t_Name(value);
  }
  static inline bool operator_t_Parse(const ::std::string& name,
      operator_t* value) {
    return SienaPlusMessage_subscription_t_operator_t_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated .sienaplus.SienaPlusMessage.subscription_t.constraint_t constraints = 1;
  inline int constraints_size() const;
  inline void clear_constraints();
  static const int kConstraintsFieldNumber = 1;
  inline const ::sienaplus::SienaPlusMessage_subscription_t_constraint_t& constraints(int index) const;
  inline ::sienaplus::SienaPlusMessage_subscription_t_constraint_t* mutable_constraints(int index);
  inline ::sienaplus::SienaPlusMessage_subscription_t_constraint_t* add_constraints();
  inline const ::google::protobuf::RepeatedPtrField< ::sienaplus::SienaPlusMessage_subscription_t_constraint_t >&
      constraints() const;
  inline ::google::protobuf::RepeatedPtrField< ::sienaplus::SienaPlusMessage_subscription_t_constraint_t >*
      mutable_constraints();
  
  // @@protoc_insertion_point(class_scope:sienaplus.SienaPlusMessage.subscription_t)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::sienaplus::SienaPlusMessage_subscription_t_constraint_t > constraints_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_SienaPlusMessage_2eproto();
  friend void protobuf_AssignDesc_SienaPlusMessage_2eproto();
  friend void protobuf_ShutdownFile_SienaPlusMessage_2eproto();
  
  void InitAsDefaultInstance();
  static SienaPlusMessage_subscription_t* default_instance_;
};
// -------------------------------------------------------------------

class SienaPlusMessage_notification_t_attribute_t : public ::google::protobuf::Message {
 public:
  SienaPlusMessage_notification_t_attribute_t();
  virtual ~SienaPlusMessage_notification_t_attribute_t();
  
  SienaPlusMessage_notification_t_attribute_t(const SienaPlusMessage_notification_t_attribute_t& from);
  
  inline SienaPlusMessage_notification_t_attribute_t& operator=(const SienaPlusMessage_notification_t_attribute_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SienaPlusMessage_notification_t_attribute_t& default_instance();
  
  void Swap(SienaPlusMessage_notification_t_attribute_t* other);
  
  // implements Message ----------------------------------------------
  
  SienaPlusMessage_notification_t_attribute_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SienaPlusMessage_notification_t_attribute_t& from);
  void MergeFrom(const SienaPlusMessage_notification_t_attribute_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required .sienaplus.SienaPlusMessage.value_t value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::sienaplus::SienaPlusMessage_value_t& value() const;
  inline ::sienaplus::SienaPlusMessage_value_t* mutable_value();
  inline ::sienaplus::SienaPlusMessage_value_t* release_value();
  
  // @@protoc_insertion_point(class_scope:sienaplus.SienaPlusMessage.notification_t.attribute_t)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::sienaplus::SienaPlusMessage_value_t* value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_SienaPlusMessage_2eproto();
  friend void protobuf_AssignDesc_SienaPlusMessage_2eproto();
  friend void protobuf_ShutdownFile_SienaPlusMessage_2eproto();
  
  void InitAsDefaultInstance();
  static SienaPlusMessage_notification_t_attribute_t* default_instance_;
};
// -------------------------------------------------------------------

class SienaPlusMessage_notification_t : public ::google::protobuf::Message {
 public:
  SienaPlusMessage_notification_t();
  virtual ~SienaPlusMessage_notification_t();
  
  SienaPlusMessage_notification_t(const SienaPlusMessage_notification_t& from);
  
  inline SienaPlusMessage_notification_t& operator=(const SienaPlusMessage_notification_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SienaPlusMessage_notification_t& default_instance();
  
  void Swap(SienaPlusMessage_notification_t* other);
  
  // implements Message ----------------------------------------------
  
  SienaPlusMessage_notification_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SienaPlusMessage_notification_t& from);
  void MergeFrom(const SienaPlusMessage_notification_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef SienaPlusMessage_notification_t_attribute_t attribute_t;
  
  // accessors -------------------------------------------------------
  
  // repeated .sienaplus.SienaPlusMessage.notification_t.attribute_t attributes = 1;
  inline int attributes_size() const;
  inline void clear_attributes();
  static const int kAttributesFieldNumber = 1;
  inline const ::sienaplus::SienaPlusMessage_notification_t_attribute_t& attributes(int index) const;
  inline ::sienaplus::SienaPlusMessage_notification_t_attribute_t* mutable_attributes(int index);
  inline ::sienaplus::SienaPlusMessage_notification_t_attribute_t* add_attributes();
  inline const ::google::protobuf::RepeatedPtrField< ::sienaplus::SienaPlusMessage_notification_t_attribute_t >&
      attributes() const;
  inline ::google::protobuf::RepeatedPtrField< ::sienaplus::SienaPlusMessage_notification_t_attribute_t >*
      mutable_attributes();
  
  // @@protoc_insertion_point(class_scope:sienaplus.SienaPlusMessage.notification_t)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::sienaplus::SienaPlusMessage_notification_t_attribute_t > attributes_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_SienaPlusMessage_2eproto();
  friend void protobuf_AssignDesc_SienaPlusMessage_2eproto();
  friend void protobuf_ShutdownFile_SienaPlusMessage_2eproto();
  
  void InitAsDefaultInstance();
  static SienaPlusMessage_notification_t* default_instance_;
};
// -------------------------------------------------------------------

class SienaPlusMessage : public ::google::protobuf::Message {
 public:
  SienaPlusMessage();
  virtual ~SienaPlusMessage();
  
  SienaPlusMessage(const SienaPlusMessage& from);
  
  inline SienaPlusMessage& operator=(const SienaPlusMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SienaPlusMessage& default_instance();
  
  void Swap(SienaPlusMessage* other);
  
  // implements Message ----------------------------------------------
  
  SienaPlusMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SienaPlusMessage& from);
  void MergeFrom(const SienaPlusMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef SienaPlusMessage_value_t value_t;
  typedef SienaPlusMessage_subscription_t subscription_t;
  typedef SienaPlusMessage_notification_t notification_t;
  
  typedef SienaPlusMessage_message_type_t message_type_t;
  static const message_type_t SUB = SienaPlusMessage_message_type_t_SUB;
  static const message_type_t NOT = SienaPlusMessage_message_type_t_NOT;
  static const message_type_t UNSUB = SienaPlusMessage_message_type_t_UNSUB;
  static inline bool message_type_t_IsValid(int value) {
    return SienaPlusMessage_message_type_t_IsValid(value);
  }
  static const message_type_t message_type_t_MIN =
    SienaPlusMessage_message_type_t_message_type_t_MIN;
  static const message_type_t message_type_t_MAX =
    SienaPlusMessage_message_type_t_message_type_t_MAX;
  static const int message_type_t_ARRAYSIZE =
    SienaPlusMessage_message_type_t_message_type_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  message_type_t_descriptor() {
    return SienaPlusMessage_message_type_t_descriptor();
  }
  static inline const ::std::string& message_type_t_Name(message_type_t value) {
    return SienaPlusMessage_message_type_t_Name(value);
  }
  static inline bool message_type_t_Parse(const ::std::string& name,
      message_type_t* value) {
    return SienaPlusMessage_message_type_t_Parse(name, value);
  }
  
  typedef SienaPlusMessage_tag_type_t tag_type_t;
  static const tag_type_t STRING = SienaPlusMessage_tag_type_t_STRING;
  static const tag_type_t INT = SienaPlusMessage_tag_type_t_INT;
  static const tag_type_t DOUBLE = SienaPlusMessage_tag_type_t_DOUBLE;
  static const tag_type_t BOOLEAN = SienaPlusMessage_tag_type_t_BOOLEAN;
  static const tag_type_t ANY_TYPE = SienaPlusMessage_tag_type_t_ANY_TYPE;
  static inline bool tag_type_t_IsValid(int value) {
    return SienaPlusMessage_tag_type_t_IsValid(value);
  }
  static const tag_type_t tag_type_t_MIN =
    SienaPlusMessage_tag_type_t_tag_type_t_MIN;
  static const tag_type_t tag_type_t_MAX =
    SienaPlusMessage_tag_type_t_tag_type_t_MAX;
  static const int tag_type_t_ARRAYSIZE =
    SienaPlusMessage_tag_type_t_tag_type_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  tag_type_t_descriptor() {
    return SienaPlusMessage_tag_type_t_descriptor();
  }
  static inline const ::std::string& tag_type_t_Name(tag_type_t value) {
    return SienaPlusMessage_tag_type_t_Name(value);
  }
  static inline bool tag_type_t_Parse(const ::std::string& name,
      tag_type_t* value) {
    return SienaPlusMessage_tag_type_t_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .sienaplus.SienaPlusMessage.message_type_t type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::sienaplus::SienaPlusMessage_message_type_t type() const;
  inline void set_type(::sienaplus::SienaPlusMessage_message_type_t value);
  
  // required string sender = 2;
  inline bool has_sender() const;
  inline void clear_sender();
  static const int kSenderFieldNumber = 2;
  inline const ::std::string& sender() const;
  inline void set_sender(const ::std::string& value);
  inline void set_sender(const char* value);
  inline void set_sender(const char* value, size_t size);
  inline ::std::string* mutable_sender();
  inline ::std::string* release_sender();
  
  // optional .sienaplus.SienaPlusMessage.subscription_t subscription = 3;
  inline bool has_subscription() const;
  inline void clear_subscription();
  static const int kSubscriptionFieldNumber = 3;
  inline const ::sienaplus::SienaPlusMessage_subscription_t& subscription() const;
  inline ::sienaplus::SienaPlusMessage_subscription_t* mutable_subscription();
  inline ::sienaplus::SienaPlusMessage_subscription_t* release_subscription();
  
  // optional .sienaplus.SienaPlusMessage.notification_t notification = 4;
  inline bool has_notification() const;
  inline void clear_notification();
  static const int kNotificationFieldNumber = 4;
  inline const ::sienaplus::SienaPlusMessage_notification_t& notification() const;
  inline ::sienaplus::SienaPlusMessage_notification_t* mutable_notification();
  inline ::sienaplus::SienaPlusMessage_notification_t* release_notification();
  
  // optional string unsubscription = 5;
  inline bool has_unsubscription() const;
  inline void clear_unsubscription();
  static const int kUnsubscriptionFieldNumber = 5;
  inline const ::std::string& unsubscription() const;
  inline void set_unsubscription(const ::std::string& value);
  inline void set_unsubscription(const char* value);
  inline void set_unsubscription(const char* value, size_t size);
  inline ::std::string* mutable_unsubscription();
  inline ::std::string* release_unsubscription();
  
  // optional string payload = 6;
  inline bool has_payload() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 6;
  inline const ::std::string& payload() const;
  inline void set_payload(const ::std::string& value);
  inline void set_payload(const char* value);
  inline void set_payload(const char* value, size_t size);
  inline ::std::string* mutable_payload();
  inline ::std::string* release_payload();
  
  // @@protoc_insertion_point(class_scope:sienaplus.SienaPlusMessage)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_sender();
  inline void clear_has_sender();
  inline void set_has_subscription();
  inline void clear_has_subscription();
  inline void set_has_notification();
  inline void clear_has_notification();
  inline void set_has_unsubscription();
  inline void clear_has_unsubscription();
  inline void set_has_payload();
  inline void clear_has_payload();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* sender_;
  ::sienaplus::SienaPlusMessage_subscription_t* subscription_;
  ::sienaplus::SienaPlusMessage_notification_t* notification_;
  ::std::string* unsubscription_;
  ::std::string* payload_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_SienaPlusMessage_2eproto();
  friend void protobuf_AssignDesc_SienaPlusMessage_2eproto();
  friend void protobuf_ShutdownFile_SienaPlusMessage_2eproto();
  
  void InitAsDefaultInstance();
  static SienaPlusMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// SienaPlusMessage_value_t

// required .sienaplus.SienaPlusMessage.tag_type_t type = 1;
inline bool SienaPlusMessage_value_t::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SienaPlusMessage_value_t::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SienaPlusMessage_value_t::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SienaPlusMessage_value_t::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::sienaplus::SienaPlusMessage_tag_type_t SienaPlusMessage_value_t::type() const {
  return static_cast< ::sienaplus::SienaPlusMessage_tag_type_t >(type_);
}
inline void SienaPlusMessage_value_t::set_type(::sienaplus::SienaPlusMessage_tag_type_t value) {
  GOOGLE_DCHECK(::sienaplus::SienaPlusMessage_tag_type_t_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string string_value = 2;
inline bool SienaPlusMessage_value_t::has_string_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SienaPlusMessage_value_t::set_has_string_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SienaPlusMessage_value_t::clear_has_string_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SienaPlusMessage_value_t::clear_string_value() {
  if (string_value_ != &::google::protobuf::internal::kEmptyString) {
    string_value_->clear();
  }
  clear_has_string_value();
}
inline const ::std::string& SienaPlusMessage_value_t::string_value() const {
  return *string_value_;
}
inline void SienaPlusMessage_value_t::set_string_value(const ::std::string& value) {
  set_has_string_value();
  if (string_value_ == &::google::protobuf::internal::kEmptyString) {
    string_value_ = new ::std::string;
  }
  string_value_->assign(value);
}
inline void SienaPlusMessage_value_t::set_string_value(const char* value) {
  set_has_string_value();
  if (string_value_ == &::google::protobuf::internal::kEmptyString) {
    string_value_ = new ::std::string;
  }
  string_value_->assign(value);
}
inline void SienaPlusMessage_value_t::set_string_value(const char* value, size_t size) {
  set_has_string_value();
  if (string_value_ == &::google::protobuf::internal::kEmptyString) {
    string_value_ = new ::std::string;
  }
  string_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SienaPlusMessage_value_t::mutable_string_value() {
  set_has_string_value();
  if (string_value_ == &::google::protobuf::internal::kEmptyString) {
    string_value_ = new ::std::string;
  }
  return string_value_;
}
inline ::std::string* SienaPlusMessage_value_t::release_string_value() {
  clear_has_string_value();
  if (string_value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_value_;
    string_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 int_value = 3;
inline bool SienaPlusMessage_value_t::has_int_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SienaPlusMessage_value_t::set_has_int_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SienaPlusMessage_value_t::clear_has_int_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SienaPlusMessage_value_t::clear_int_value() {
  int_value_ = 0;
  clear_has_int_value();
}
inline ::google::protobuf::int32 SienaPlusMessage_value_t::int_value() const {
  return int_value_;
}
inline void SienaPlusMessage_value_t::set_int_value(::google::protobuf::int32 value) {
  set_has_int_value();
  int_value_ = value;
}

// optional double double_value = 4;
inline bool SienaPlusMessage_value_t::has_double_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SienaPlusMessage_value_t::set_has_double_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SienaPlusMessage_value_t::clear_has_double_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SienaPlusMessage_value_t::clear_double_value() {
  double_value_ = 0;
  clear_has_double_value();
}
inline double SienaPlusMessage_value_t::double_value() const {
  return double_value_;
}
inline void SienaPlusMessage_value_t::set_double_value(double value) {
  set_has_double_value();
  double_value_ = value;
}

// optional bool bool_value = 5;
inline bool SienaPlusMessage_value_t::has_bool_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SienaPlusMessage_value_t::set_has_bool_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SienaPlusMessage_value_t::clear_has_bool_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SienaPlusMessage_value_t::clear_bool_value() {
  bool_value_ = false;
  clear_has_bool_value();
}
inline bool SienaPlusMessage_value_t::bool_value() const {
  return bool_value_;
}
inline void SienaPlusMessage_value_t::set_bool_value(bool value) {
  set_has_bool_value();
  bool_value_ = value;
}

// -------------------------------------------------------------------

// SienaPlusMessage_subscription_t_constraint_t

// required string name = 1;
inline bool SienaPlusMessage_subscription_t_constraint_t::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SienaPlusMessage_subscription_t_constraint_t::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SienaPlusMessage_subscription_t_constraint_t::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SienaPlusMessage_subscription_t_constraint_t::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SienaPlusMessage_subscription_t_constraint_t::name() const {
  return *name_;
}
inline void SienaPlusMessage_subscription_t_constraint_t::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SienaPlusMessage_subscription_t_constraint_t::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SienaPlusMessage_subscription_t_constraint_t::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SienaPlusMessage_subscription_t_constraint_t::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SienaPlusMessage_subscription_t_constraint_t::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .sienaplus.SienaPlusMessage.subscription_t.operator_t op = 2;
inline bool SienaPlusMessage_subscription_t_constraint_t::has_op() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SienaPlusMessage_subscription_t_constraint_t::set_has_op() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SienaPlusMessage_subscription_t_constraint_t::clear_has_op() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SienaPlusMessage_subscription_t_constraint_t::clear_op() {
  op_ = 1;
  clear_has_op();
}
inline ::sienaplus::SienaPlusMessage_subscription_t_operator_t SienaPlusMessage_subscription_t_constraint_t::op() const {
  return static_cast< ::sienaplus::SienaPlusMessage_subscription_t_operator_t >(op_);
}
inline void SienaPlusMessage_subscription_t_constraint_t::set_op(::sienaplus::SienaPlusMessage_subscription_t_operator_t value) {
  GOOGLE_DCHECK(::sienaplus::SienaPlusMessage_subscription_t_operator_t_IsValid(value));
  set_has_op();
  op_ = value;
}

// required .sienaplus.SienaPlusMessage.value_t value = 3;
inline bool SienaPlusMessage_subscription_t_constraint_t::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SienaPlusMessage_subscription_t_constraint_t::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SienaPlusMessage_subscription_t_constraint_t::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SienaPlusMessage_subscription_t_constraint_t::clear_value() {
  if (value_ != NULL) value_->::sienaplus::SienaPlusMessage_value_t::Clear();
  clear_has_value();
}
inline const ::sienaplus::SienaPlusMessage_value_t& SienaPlusMessage_subscription_t_constraint_t::value() const {
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::sienaplus::SienaPlusMessage_value_t* SienaPlusMessage_subscription_t_constraint_t::mutable_value() {
  set_has_value();
  if (value_ == NULL) value_ = new ::sienaplus::SienaPlusMessage_value_t;
  return value_;
}
inline ::sienaplus::SienaPlusMessage_value_t* SienaPlusMessage_subscription_t_constraint_t::release_value() {
  clear_has_value();
  ::sienaplus::SienaPlusMessage_value_t* temp = value_;
  value_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// SienaPlusMessage_subscription_t

// repeated .sienaplus.SienaPlusMessage.subscription_t.constraint_t constraints = 1;
inline int SienaPlusMessage_subscription_t::constraints_size() const {
  return constraints_.size();
}
inline void SienaPlusMessage_subscription_t::clear_constraints() {
  constraints_.Clear();
}
inline const ::sienaplus::SienaPlusMessage_subscription_t_constraint_t& SienaPlusMessage_subscription_t::constraints(int index) const {
  return constraints_.Get(index);
}
inline ::sienaplus::SienaPlusMessage_subscription_t_constraint_t* SienaPlusMessage_subscription_t::mutable_constraints(int index) {
  return constraints_.Mutable(index);
}
inline ::sienaplus::SienaPlusMessage_subscription_t_constraint_t* SienaPlusMessage_subscription_t::add_constraints() {
  return constraints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sienaplus::SienaPlusMessage_subscription_t_constraint_t >&
SienaPlusMessage_subscription_t::constraints() const {
  return constraints_;
}
inline ::google::protobuf::RepeatedPtrField< ::sienaplus::SienaPlusMessage_subscription_t_constraint_t >*
SienaPlusMessage_subscription_t::mutable_constraints() {
  return &constraints_;
}

// -------------------------------------------------------------------

// SienaPlusMessage_notification_t_attribute_t

// required string name = 1;
inline bool SienaPlusMessage_notification_t_attribute_t::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SienaPlusMessage_notification_t_attribute_t::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SienaPlusMessage_notification_t_attribute_t::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SienaPlusMessage_notification_t_attribute_t::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SienaPlusMessage_notification_t_attribute_t::name() const {
  return *name_;
}
inline void SienaPlusMessage_notification_t_attribute_t::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SienaPlusMessage_notification_t_attribute_t::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SienaPlusMessage_notification_t_attribute_t::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SienaPlusMessage_notification_t_attribute_t::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SienaPlusMessage_notification_t_attribute_t::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .sienaplus.SienaPlusMessage.value_t value = 2;
inline bool SienaPlusMessage_notification_t_attribute_t::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SienaPlusMessage_notification_t_attribute_t::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SienaPlusMessage_notification_t_attribute_t::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SienaPlusMessage_notification_t_attribute_t::clear_value() {
  if (value_ != NULL) value_->::sienaplus::SienaPlusMessage_value_t::Clear();
  clear_has_value();
}
inline const ::sienaplus::SienaPlusMessage_value_t& SienaPlusMessage_notification_t_attribute_t::value() const {
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::sienaplus::SienaPlusMessage_value_t* SienaPlusMessage_notification_t_attribute_t::mutable_value() {
  set_has_value();
  if (value_ == NULL) value_ = new ::sienaplus::SienaPlusMessage_value_t;
  return value_;
}
inline ::sienaplus::SienaPlusMessage_value_t* SienaPlusMessage_notification_t_attribute_t::release_value() {
  clear_has_value();
  ::sienaplus::SienaPlusMessage_value_t* temp = value_;
  value_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// SienaPlusMessage_notification_t

// repeated .sienaplus.SienaPlusMessage.notification_t.attribute_t attributes = 1;
inline int SienaPlusMessage_notification_t::attributes_size() const {
  return attributes_.size();
}
inline void SienaPlusMessage_notification_t::clear_attributes() {
  attributes_.Clear();
}
inline const ::sienaplus::SienaPlusMessage_notification_t_attribute_t& SienaPlusMessage_notification_t::attributes(int index) const {
  return attributes_.Get(index);
}
inline ::sienaplus::SienaPlusMessage_notification_t_attribute_t* SienaPlusMessage_notification_t::mutable_attributes(int index) {
  return attributes_.Mutable(index);
}
inline ::sienaplus::SienaPlusMessage_notification_t_attribute_t* SienaPlusMessage_notification_t::add_attributes() {
  return attributes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sienaplus::SienaPlusMessage_notification_t_attribute_t >&
SienaPlusMessage_notification_t::attributes() const {
  return attributes_;
}
inline ::google::protobuf::RepeatedPtrField< ::sienaplus::SienaPlusMessage_notification_t_attribute_t >*
SienaPlusMessage_notification_t::mutable_attributes() {
  return &attributes_;
}

// -------------------------------------------------------------------

// SienaPlusMessage

// required .sienaplus.SienaPlusMessage.message_type_t type = 1;
inline bool SienaPlusMessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SienaPlusMessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SienaPlusMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SienaPlusMessage::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::sienaplus::SienaPlusMessage_message_type_t SienaPlusMessage::type() const {
  return static_cast< ::sienaplus::SienaPlusMessage_message_type_t >(type_);
}
inline void SienaPlusMessage::set_type(::sienaplus::SienaPlusMessage_message_type_t value) {
  GOOGLE_DCHECK(::sienaplus::SienaPlusMessage_message_type_t_IsValid(value));
  set_has_type();
  type_ = value;
}

// required string sender = 2;
inline bool SienaPlusMessage::has_sender() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SienaPlusMessage::set_has_sender() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SienaPlusMessage::clear_has_sender() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SienaPlusMessage::clear_sender() {
  if (sender_ != &::google::protobuf::internal::kEmptyString) {
    sender_->clear();
  }
  clear_has_sender();
}
inline const ::std::string& SienaPlusMessage::sender() const {
  return *sender_;
}
inline void SienaPlusMessage::set_sender(const ::std::string& value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
}
inline void SienaPlusMessage::set_sender(const char* value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
}
inline void SienaPlusMessage::set_sender(const char* value, size_t size) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  sender_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SienaPlusMessage::mutable_sender() {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  return sender_;
}
inline ::std::string* SienaPlusMessage::release_sender() {
  clear_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sender_;
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .sienaplus.SienaPlusMessage.subscription_t subscription = 3;
inline bool SienaPlusMessage::has_subscription() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SienaPlusMessage::set_has_subscription() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SienaPlusMessage::clear_has_subscription() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SienaPlusMessage::clear_subscription() {
  if (subscription_ != NULL) subscription_->::sienaplus::SienaPlusMessage_subscription_t::Clear();
  clear_has_subscription();
}
inline const ::sienaplus::SienaPlusMessage_subscription_t& SienaPlusMessage::subscription() const {
  return subscription_ != NULL ? *subscription_ : *default_instance_->subscription_;
}
inline ::sienaplus::SienaPlusMessage_subscription_t* SienaPlusMessage::mutable_subscription() {
  set_has_subscription();
  if (subscription_ == NULL) subscription_ = new ::sienaplus::SienaPlusMessage_subscription_t;
  return subscription_;
}
inline ::sienaplus::SienaPlusMessage_subscription_t* SienaPlusMessage::release_subscription() {
  clear_has_subscription();
  ::sienaplus::SienaPlusMessage_subscription_t* temp = subscription_;
  subscription_ = NULL;
  return temp;
}

// optional .sienaplus.SienaPlusMessage.notification_t notification = 4;
inline bool SienaPlusMessage::has_notification() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SienaPlusMessage::set_has_notification() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SienaPlusMessage::clear_has_notification() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SienaPlusMessage::clear_notification() {
  if (notification_ != NULL) notification_->::sienaplus::SienaPlusMessage_notification_t::Clear();
  clear_has_notification();
}
inline const ::sienaplus::SienaPlusMessage_notification_t& SienaPlusMessage::notification() const {
  return notification_ != NULL ? *notification_ : *default_instance_->notification_;
}
inline ::sienaplus::SienaPlusMessage_notification_t* SienaPlusMessage::mutable_notification() {
  set_has_notification();
  if (notification_ == NULL) notification_ = new ::sienaplus::SienaPlusMessage_notification_t;
  return notification_;
}
inline ::sienaplus::SienaPlusMessage_notification_t* SienaPlusMessage::release_notification() {
  clear_has_notification();
  ::sienaplus::SienaPlusMessage_notification_t* temp = notification_;
  notification_ = NULL;
  return temp;
}

// optional string unsubscription = 5;
inline bool SienaPlusMessage::has_unsubscription() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SienaPlusMessage::set_has_unsubscription() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SienaPlusMessage::clear_has_unsubscription() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SienaPlusMessage::clear_unsubscription() {
  if (unsubscription_ != &::google::protobuf::internal::kEmptyString) {
    unsubscription_->clear();
  }
  clear_has_unsubscription();
}
inline const ::std::string& SienaPlusMessage::unsubscription() const {
  return *unsubscription_;
}
inline void SienaPlusMessage::set_unsubscription(const ::std::string& value) {
  set_has_unsubscription();
  if (unsubscription_ == &::google::protobuf::internal::kEmptyString) {
    unsubscription_ = new ::std::string;
  }
  unsubscription_->assign(value);
}
inline void SienaPlusMessage::set_unsubscription(const char* value) {
  set_has_unsubscription();
  if (unsubscription_ == &::google::protobuf::internal::kEmptyString) {
    unsubscription_ = new ::std::string;
  }
  unsubscription_->assign(value);
}
inline void SienaPlusMessage::set_unsubscription(const char* value, size_t size) {
  set_has_unsubscription();
  if (unsubscription_ == &::google::protobuf::internal::kEmptyString) {
    unsubscription_ = new ::std::string;
  }
  unsubscription_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SienaPlusMessage::mutable_unsubscription() {
  set_has_unsubscription();
  if (unsubscription_ == &::google::protobuf::internal::kEmptyString) {
    unsubscription_ = new ::std::string;
  }
  return unsubscription_;
}
inline ::std::string* SienaPlusMessage::release_unsubscription() {
  clear_has_unsubscription();
  if (unsubscription_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = unsubscription_;
    unsubscription_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string payload = 6;
inline bool SienaPlusMessage::has_payload() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SienaPlusMessage::set_has_payload() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SienaPlusMessage::clear_has_payload() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SienaPlusMessage::clear_payload() {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    payload_->clear();
  }
  clear_has_payload();
}
inline const ::std::string& SienaPlusMessage::payload() const {
  return *payload_;
}
inline void SienaPlusMessage::set_payload(const ::std::string& value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
}
inline void SienaPlusMessage::set_payload(const char* value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
}
inline void SienaPlusMessage::set_payload(const char* value, size_t size) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SienaPlusMessage::mutable_payload() {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  return payload_;
}
inline ::std::string* SienaPlusMessage::release_payload() {
  clear_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = payload_;
    payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sienaplus

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sienaplus::SienaPlusMessage_subscription_t_operator_t>() {
  return ::sienaplus::SienaPlusMessage_subscription_t_operator_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sienaplus::SienaPlusMessage_message_type_t>() {
  return ::sienaplus::SienaPlusMessage_message_type_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sienaplus::SienaPlusMessage_tag_type_t>() {
  return ::sienaplus::SienaPlusMessage_tag_type_t_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SienaPlusMessage_2eproto__INCLUDED
